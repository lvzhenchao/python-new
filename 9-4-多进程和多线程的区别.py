
# 多任务优缺点：实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，因此，多任务环境下，通常是一个Master，多个Worker
## 多进程最大的优点：稳定性高，因为一个子进程崩了，不会影响主进程和其他子进程（除非是主进程挂了，几率很低，只负责分配任务）
## 多进程最大的缺点：创建进程的代价大，不同系统的开销差别很大，win开销巨大。另外，在内存和CPU的限制下，同时运行的进程数也是有限的，太多的进程，调度都会成问题
## 多线程模式通常比多进程模式快一点，但也快不到哪去
## 多线程的缺点：致命缺点，任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存

# 线程切换
## 操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。
## 如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态
## 多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好

# 计算密集型 vs. IO密集型:是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型


# 分布式进程
## 在Thread和Process中，应当优选Process，因为Process更稳定，而且，Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上

## Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上
